#!.venv/bin/python

import click
import os
import sys

from flask import current_app
from flask.cli import FlaskGroup

# do not load environment variables from `.env`-file automatically
# if this will not be done - tests (`test_config.py`) will fail
os.environ['FLASK_SKIP_DOTENV'] = '1'


# noinspection PyUnusedLocal
def create_app(info):
    from app import app
    return app


@click.group(cls=FlaskGroup, create_app=create_app)
def cli():
    pass


@cli.command('hello', short_help='Shows greet message')
@click.option('--name', default=None, help='Name to personalize greet message')
def hello(name):
    """Shows greet message"""
    greet_message = "Hello, {}".format(name if name else "stranger")
    click.echo(greet_message)


#
# test:
#

@cli.command('test:run', short_help='Runs tests')
@click.option('-q', '--quiet', is_flag=True, help='Run tests quietly')
@click.option('--modular-only', is_flag=True, help='Run only modular tests')
@click.option('--web-only', is_flag=True, help='Run only web-related tests')
@click.option('--cov', is_flag=True, help='Run tests with coverage')
@click.argument('files', nargs=-1)
def test_run(quiet, modular_only, web_only, cov, files):
    """Runs the unit tests without test coverage
    By default runs all tests, but you can choose what to include.
    """
    options = []

    if quiet:
        options.append('-q')
    else:
        options.append('-v')

    marks = []

    if web_only:
        marks.append('webtest')

    if modular_only:
        marks.append('not webtest')

    user_defined_marks = '' if not marks else '(' + ') or ('.join(marks) + ') and '
    options.append('-m "{}not skip"'.format(user_defined_marks))

    if cov:
        options.append('--cov')
        options.append('--cov-config=setup.cfg')

    if files:
        options = options + list(files)

    command = f'{get_path_to_executables()}python -m pytest ' + ' '.join(options)
    print(command)

    exit_code = os.system(command)
    sys.exit(exit_code)


@cli.command('test:fixtures', short_help='Show existing tests\' fixtures')
def test_fixtures():
    """Shows existing tests' fixtures"""
    os.system(f'{get_path_to_executables()}python -m pytest --fixtures')


@cli.command('test:markers', short_help='Show existing tests\' markers')
def test_markers():
    """Shows existing tests' markers"""
    os.system(f'{get_path_to_executables()}python -m pytest --markers')


@cli.command('test:coverage', short_help='Runs tests with coverage')
def test_coverage():
    """Runs the unit tests with getting info about test coverage"""
    os.system(f'{get_path_to_executables()}coverage run -m pytest && {get_path_to_executables()}coverage report -m')


@cli.command('test:lint', short_help='Runs code linting')
@click.option('--critical', is_flag=True, help='Run only critical rules')
def test_lint(critical):
    command = f'{get_path_to_executables()}flake8'

    if critical:
        # stop the build if there are Python syntax errors or undefined names
        exit_code = os.system(f'{command} . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.venv')
        sys.exit(exit_code)

    # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    os.system(f'{command} . --count --max-complexity=10 --max-line-length=127 --statistics --exclude=.venv')


def get_path_to_executables():
    """Returns name of python-executable."""
    if current_app.config.get('IN_VIRTUALENV'):
        return '.venv/bin/'
    return ''


if __name__ == '__main__':
    cli()
